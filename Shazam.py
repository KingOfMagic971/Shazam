# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import asyncio
import aiohttp
import base64
import json
from urllib.parse import quote

logger = logging.getLogger(__name__)

@loader.tds
class ShazamMod(loader.Module):
    """Shazam –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ API"""
    
    strings = {
        "name": "ShazamAPI",
        "processing": "üéµ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞—É–¥–∏–æ...",
        "recognized": "üé∂ –ù–∞–π–¥–µ–Ω–æ: {} - {}",
        "not_found": "‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞",
        "no_audio": "‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "error": "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
        "no_api": "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á",
        "downloading": "üì• –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...",
        "api_help": "üîë –ü–æ–ª—É—á–∏ API –∫–ª—é—á: https://audd.io (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                "",
                "API –∫–ª—é—á –æ—Ç AudD (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "auto_recognition", 
                False,
                "–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "respond_to_self",
                True,  # –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!
                "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ",
                validator=loader.validators.Boolean()
            )
        )

    async def client_ready(self, client, db):
        self._client = client

    async def download_audio(self, message):
        """–°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not (message.voice or message.audio or message.video_note):
            return None
            
        try:
            file = await message.download_media(file=bytes)
            return file
        except Exception as e:
            logger.error(f"Download error: {e}")
            return None

    async def recognize_audd(self, audio_data):
        """–†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ AudD API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)"""
        if not self.config["api_key"]:
            return self.strings("no_api")
            
        try:
            url = "https://api.audd.io/"
            
            form_data = aiohttp.FormData()
            form_data.add_field('api_token', self.config["api_key"])
            form_data.add_field('return', 'apple_music,spotify')
            form_data.add_field('method', 'recognize')
            form_data.add_field('file', audio_data, filename='audio.mp3', content_type='audio/mpeg')
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=form_data) as response:
                    result = await response.json()
                    
                    if result['status'] == 'success' and result['result']:
                        track = result['result']
                        artist = track.get('artist', 'Unknown Artist')
                        title = track.get('title', 'Unknown Title')
                        album = track.get('album', '')
                        
                        response_text = f"üéµ {artist} - {title}"
                        if album:
                            response_text += f"\nüíø –ê–ª—å–±–æ–º: {album}"
                            
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
                        if track.get('apple_music'):
                            response_text += f"\nüçé Apple Music: {track['apple_music']['url']}"
                        if track.get('spotify'):
                            response_text += f"\nüü¢ Spotify: {track['spotify']['external_urls']['spotify']}"
                            
                        return response_text
                    else:
                        return self.strings("not_found")
                        
        except Exception as e:
            logger.error(f"Audd error: {e}")
            return self.strings("error")

    async def recognize_music(self, audio_data):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        return await self.recognize_audd(audio_data)

    @loader.command()
    async def shazam(self, message):
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ - –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, "‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
            
        await utils.answer(message, self.strings("downloading"))
        
        audio_data = await self.download_audio(reply)
        if not audio_data:
            await utils.answer(message, self.strings("no_audio"))
            return
        
        await utils.answer(message, self.strings("processing"))
        
        result = await self.recognize_music(audio_data)
        await utils.answer(message, result)

    @loader.command()
    async def shazamkey(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á AudD - .shazamkey <–∫–ª—é—á>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ API –∫–ª—é—á\nüîë –ü–æ–ª—É—á–∏—Ç—å: https://audd.io\nüí° –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü")
            return
            
        self.config["api_key"] = args
        await utils.answer(message, "‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @loader.command()
    async def shazamauto(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"""
        self.config["auto_recognition"] = not self.config["auto_recognition"]
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if self.config["auto_recognition"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        await utils.answer(message, f"–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {status}")

    @loader.command()
    async def shazamself(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.config["respond_to_self"] = not self.config["respond_to_self"]
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if self.config["respond_to_self"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        await utils.answer(message, f"–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {status}")

    @loader.command()
    async def shazamhelp(self, message):
        """–ü–æ–º–æ—â—å –ø–æ Shazam –º–æ–¥—É–ª—é"""
        help_text = (
            "üéµ ShazamAPI Help:\n\n"
            "üîë –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á:\n"
            "‚Ä¢ AudD: https://audd.io (100 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)\n\n"
            "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
            ".shazam - —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º—É–∑—ã–∫—É (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ)\n"
            ".shazamkey <key> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á\n"
            ".shazamauto - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ\n"
            ".shazamself - –≤–∫–ª/–≤—ã–∫–ª –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            ".shazamhelp - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –í–°–ï –≥–æ–ª–æ—Å–æ–≤—ã–µ!"
        )
        await utils.answer(message, help_text)

    @loader.watcher()
    async def watcher(self, message):
        """–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –í–°–ï –≤–∫–ª—é—á–∞—è —Å–≤–æ–∏"""
        if not self.config["auto_recognition"]:
            return
            
        if message.voice or message.audio or message.video_note:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.out and not self.config["respond_to_self"]:
                return
                
            processing_msg = await message.reply(self.strings("processing"))
            
            audio_data = await self.download_audio(message)
            if not audio_data:
                await processing_msg.delete()
                return
                
            result = await self.recognize_music(audio_data)
            await processing_msg.edit(result)
